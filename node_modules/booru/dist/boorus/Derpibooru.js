"use strict";
/**
 * @packageDocumentation
 * @module Boorus
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
const Booru_1 = __importDefault(require("./Booru"));
/**
 * A class designed for Derpibooru
 * >:(
 * @private
 * @extends Booru
 * @inheritDoc
 */
class Derpibooru extends Booru_1.default {
    /**
     * Create a new booru for Derpibooru from a site
     * @param site The site to use
     * @param credentials Credentials for the API (Currently not used)
     */
    constructor(site, credentials) {
        super(site, credentials);
    }
    /** @inheritDoc */
    search(tags, { limit = 1, random = false, page = 0 } = {}) {
        if (!Array.isArray(tags)) {
            tags = [tags];
        }
        // For any image, you must supply *
        if (tags[0] === undefined) {
            tags[0] = '*';
        }
        // Derpibooru offsets the pages by 1
        page += 1;
        const uri = this.getSearchUrl({ tags, limit, page }) +
            (random && this.site.random === 'string' ? `&${this.site.random}` : '') +
            (this.credentials ? `&key=${this.credentials.token}` : '');
        return super
            .doSearchRequest(tags, { limit, random, page, uri })
            .then((r) => super.parseSearchResult(r, { fakeLimit: 0, tags, limit, random, page }))
            .catch((e) => Promise.reject(new Constants_1.BooruError(e)));
    }
}
exports.default = Derpibooru;
//# sourceMappingURL=Derpibooru.js.map